#include <iostream>
#include <vector>
#include <omp.h>
using namespace std;

struct Node {
    int data;
    vector<Node*> neighbors;
};

void parallel_DFS(Node* node, vector<bool>& visited) {
    #pragma omp critical
    {
        if (visited[node->data]) return;
        visited[node->data] = true;
        cout << node->data << " ";
    }

    #pragma omp parallel for
    for (int i = 0; i < node->neighbors.size(); ++i) {
        Node* neighbor = node->neighbors[i];
        #pragma omp critical
        {
            if (!visited[neighbor->data]) {
                parallel_DFS(neighbor, visited);
            }
        }
    }
}

int main() {
    int n, e;
    cout << "Enter number of nodes: ";
    cin >> n;

    vector<Node*> graph(n);
    for (int i = 0; i < n; ++i) {
        graph[i] = new Node;
        graph[i]->data = i;
    }

    cout << "Enter number of edges: ";
    cin >> e;
    cout << "Enter " << e << " edges (u v):" << endl;
    for (int i = 0; i < e; ++i) {
        int u, v;
        cin >> u >> v;
        graph[u]->neighbors.push_back(graph[v]);
        graph[v]->neighbors.push_back(graph[u]);  // For undirected graph
    }

    int start;
    cout << "Enter starting node for DFS: ";
    cin >> start;

    vector<bool> visited(n, false);

    cout << "Parallel DFS Output: ";
    #pragma omp parallel
    {
        #pragma omp single
        {
            parallel_DFS(graph[start], visited);
        }
    }
    cout << endl;

    // Clean up
    for (auto node : graph) delete node;

    return 0;
}


/*
input 
Enter number of nodes: 6
Enter number of edges: 7
Enter 7 edges (u v):
0 1
0 2
1 3
1 4
2 4
3 5
4 5
Enter starting node for DFS: 0

      0
     / \
    1   2
   / \   \
  3   4---/
   \  /
     5

ouput 
Parallel DFS Output: 0 1 3 5 4 2

*/