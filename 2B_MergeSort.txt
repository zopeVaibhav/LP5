#include<iostream>
#include<stdlib.h>
#include<omp.h>
#include<chrono> // For timing
using namespace std;
using namespace std::chrono;

void mergesort(int a[], int i, int j);
void merge(int a[], int i1, int j1, int i2, int j2);

void mergesort(int a[], int i, int j)
{
    int mid;
    if (i < j){
        mid = (i + j) / 2;
        #pragma omp parallel sections
        {
            #pragma omp section
            {
                mergesort(a, i, mid);
            }

            #pragma omp section
            {
                mergesort(a, mid + 1, j);
            }
        }
        merge(a, i, mid, mid + 1, j);
    }
}

void merge(int a[], int i1, int j1, int i2, int j2){
    int size = j2 - i1 + 1;
    int* temp = new int[size]; 
    int i = i1, j = i2, k = 0;

    while (i <= j1 && j <= j2){
        if (a[i] < a[j])
            temp[k++] = a[i++];
        else
            temp[k++] = a[j++];
    }

    while (i <= j1) temp[k++] = a[i++];
    while (j <= j2) temp[k++] = a[j++];

    for (i = i1, k = 0; i <= j2; i++, k++)
        a[i] = temp[k];

    delete[] temp;
}

int main(){
    int *a, n, i;

    cout << "\nEnter total number of elements: ";
    cin >> n;

    a = new int[n];

    cout << "\nEnter elements: ";
    for (i = 0; i < n; i++)
    {
        cin >> a[i];
    }

    // Start time measurement
    auto start = high_resolution_clock::now();

    // Perform mergesort
    mergesort(a, 0, n - 1);

    // End time measurement
    auto stop = high_resolution_clock::now();

    // Calculate duration
    auto duration = duration_cast<microseconds>(stop - start);

    cout << "\nSorted array is: ";
    for (i = 0; i < n; i++){
        cout << a[i] << " ";
    }

    cout << "\nTime taken by mergesort: " << duration.count() << " microseconds" << endl;

    delete[] a; 
    return 0;
}