# !pip install tensorflow
import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

data = pd.read_csv('Boston.csv')
print(data.head())

X = data.drop('medv', axis=1)
Y = data['medv']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from keras import Input
from keras.models import Sequential
from keras.layers import Dense

model = Sequential()
model.add(Input(shape=(X_train.shape[1],)))
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])

history = model.fit(X_train, Y_train, epochs=100, batch_size=32, validation_split=0.2)

loss, mae = model.evaluate(X_test, Y_test)
print(f"Test Mean Absolute Error: {mae}")

predictions = model.predict(X_test)
print(predictions[:5])

import matplotlib.pyplot as plt

plt.plot(history.history['loss'], label="Training Loss")
plt.plot(history.history['val_loss'], label = "Validation Loss")
plt.title('Model Loss over Epochs')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend()
plt.grid(True)
plt.show()
